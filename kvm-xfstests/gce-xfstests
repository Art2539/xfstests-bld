#!/bin/sh

DIR=.

if test -n "$GCE_XFSTESTS_DIR"
then
    DIR="$GCE_XFSTESTS_DIR"
fi

. $DIR/config

if test -r test-appliance/config.custom ; then
   . $(pwd)/test-appliance/config.custom
fi

if test -z "$GS_BUCKET" -o -z "$GCE_PROJECT" -o -z "$GCE_ZONE"
then
	echo "You must configure GS_BUCKET, GCE_PROJECT, and GCE_ZONE in"
	echo "your config file"
	exit 1
fi

QUIET="quiet loglevel=0"

case "$1" in
    ls|ls-instances)
#	gcloud compute --project "$GCE_PROJECT" instances list \
#	       --regexp ^xfstests.*
	l=$(gcloud compute --project "$GCE_PROJECT" instances list \
		--regexp ^xfstests.* --format=json | jq ".[].name" | \
		sed -e 's/^"//' -e 's/"$//')
	for i in $l
	do
	    status=$(gcloud compute --project "$GCE_PROJECT" instances \
			describe $i --format=json | jq \
		'.metadata.items[] | select(.key == "status") | .value' | \
			sed -e 's/^"//' -e 's/"$//')
	    echo $i - $status
	done
	exit 0
	;;
    rm|rm-instances|abort|abort-instances)
	if ! gcloud compute instances describe "$2" \
	     --zone $GCE_ZONE > /dev/null 2>&1
	then
	    echo "GCE instance $2 does not exist"
	fi
	if test "$1" = "abort"
	then
	    deldisks="--delete-disks all"
	fi
	shift
	for i in "$*"
	do
	    gcloud compute --project "$GCE_PROJECT" -q instances delete "$i" \
		   --zone "$GCE_ZONE" $deldisks &
	done
	exit 0
	;;
    ls-disks|ls-disk)
	gcloud compute --project "$GCE_PROJECT" disks list \
	       --regexp ^xfstests.*
	exit 0
	;;
    rm-disks|rm-disk)
	shift
	gcloud compute --project "$GCE_PROJECT" disks delete $* \
	exit 0
	;;
    ls-gcs)
	shift
	for i in $*
	do
	    case $i in
		-*)
		    opt="$opt $i"
		    ;;
		*)
		    arg="$arg gs://$GS_BUCKET/$i"
		    ;;
	    esac
	done
	if test -z "$arg"
	then
	    arg="gs://$GS_BUCKET"
	fi
	gsutil ls $opt $arg
	exit 0
	;;
    rm-gcs)
	shift
	for i in $*
	do
	    case $i in
		-*)
		    opt="$opt $i"
		    ;;
		*)
		    arg="$arg gs://$GS_BUCKET/$i"
		    ;;
	    esac
	done
	if test -z "$arg"
	then
	    arg="gs://$GS_BUCKET"
	fi
	gsutil rm $opt $arg
	exit 0
	;;
    ssh)
	if ! gcloud compute instances describe "$2" \
	     --zone $GCE_ZONE > /dev/null 2>&1
	then
	    echo "GCE instance $2 does not exist"
	fi
	gcloud compute --project "$GCE_PROJECT" -q ssh "$2" \
	       --zone "$GCE_ZONE"
	exit 0
	;;
    console)
	gcloud compute --project "$GCE_PROJECT" -q instances \
	       get-serial-port-output "$2" --zone "$GCE_ZONE"
	exit 0
	;;
    get-results)
	case "$2" in
	    --failures|-F)
		OPT="-F"
		shift
		;;
	esac
	tmpfile=$(mktemp)
	gcloud compute --project "$GCE_PROJECT" -q \
	       copy-files "$2:/results/runtests.log" $tmpfile \
	       --zone "$GCE_ZONE"
	$DIR/get-results $OPT $tmpfile
	/bin/rm -f $tmpfile
	exit 0
	;;
esac

. $DIR/util/parse_cli

API="1.1"

ARG="$ARG fstesttyp=$PRIMARY_FSTYPE fstestapi=$API"

if test -n "$EXTRA_ARG"
then
    ARG="$ARG kopt=$EXTRA_ARG"
fi

GS_RW=https://www.googleapis.com/auth/devstorage.read_write
GS_RO=https://www.googleapis.com/auth/devstorage.read_only
LOG_WR=https://www.googleapis.com/auth/logging.write
COMPUTE_RW=https://www.googleapis.com/auth/compute

SCOPES="$GS_RW,$COMPUTE_RW,$LOG_WR"

DATECODE=$(date +%Y%m%d%H%M)
INSTANCE="xfstests-$DATECODE"

case "$ARG" in
    cmd=maint*)
	INSTANCE="xfstests"
	;;
esac

GS_KERNEL=gs://$GS_BUCKET/bzImage
if test -z "$GCE_KERNEL"
then
    GCE_KERNEL=$KERNEL
fi

if test -n "$OVERRIDE_KERNEL"
then
    GCE_KERNEL=$OVERRIDE_KERNEL
    GS_KERNEL=gs://$GS_BUCKET/bzImage-$DATECODE-onetime
fi

if ! test -f "$GCE_KERNEL"
then
    echo "Can't find kernel at $GCE_KERNEL"
    exit 1
fi

LOCAL_HASH=$(gsutil hash $GCE_KERNEL 2> /dev/null |  grep "Hash (md5)" | awk '{print $3}')
REMOTE_HASH=$(gsutil stat $GS_KERNEL 2> /dev/null | grep "Hash (md5)" | awk '{print $3}')
if test "$LOCAL_HASH" != "$REMOTE_HASH"
then
	gsutil cp $GCE_KERNEL $GS_KERNEL
fi

ARG="$ARG kexec=$GS_KERNEL"

case $NR_CPU in
    1)
	MT_CPU=1
	RAM_N=3840
	;;
    2)
	MT_CPU=2
	RAM_N=7680
	RAM_H=13312
	RAM_L=1843
	;;
    3|4)
	MT_CPU=4
	RAM_N=15360
	RAM_H=26624
	RAM_L=3686
	;;
    5|6|7|8)
	MT_CPU=8
	RAM_N=30720
	RAM_H=53248
	RAM_L=7372
	;;
    9|10|11|12|13|14|15|16)
	MT_CPU=16
	RAM_N=61440
	RAM_H=106496
	RAM_L=14745
	;;
    17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32)
	MT_CPU=32
	RAM_N=122880
	RAM_H=212992
	RAM_L=29491
	;;
esac

if test $MT_CPU -eq 1
then
    MT=n1-standard-1
    RAM=$RAM_N
else
    if test $MEM -le $RAM_L
    then
	MT=n1-highcpu-$MT_CPU
	RAM=$RAM_L
    elif test $MEM -le $RAM_N
    then
	MT=n1-standard-$MT_CPU
	RAM=$RAM_N
    else
	MT=n1-highmem-$MT_CPU
	RAM=$RAM_H
    fi
fi

if test $MEM -ge $RAM
then
    echo "Warning: requested $MEM memory but only $RAM available"
    echo "with $MT_CPU cpus"
fi

if test $MEM -lt $RAM
then
    ARG="$ARG mem=$MEM"
fi

if test $NR_CPU -lt $MT_CPU
then
    ARG="$ARG nr_cpus=$NR_CPU"
fi

ARG="$ARG gs_bucket=$GS_BUCKET"

if test -n "$GCE_SG_USER" -a -n "$GCE_SG_PASS"
then
    ARG="$ARG sg_user=$GCE_SG_USER sg_pass=$GCE_SG_PASS"
fi

if test -n "$GCE_REPORT_EMAIL"
then
    ARG="$ARG report_email=$GCE_REPORT_EMAIL"
fi

echo "Launching $MT...."
# echo "Using ARG: $ARG"

gcloud compute --project "$GCE_PROJECT" \
       instances create $INSTANCE --zone "$GCE_ZONE" \
       --machine-type "$MT" --network "default" \
       --maintenance-policy "MIGRATE" \
       --scopes "$SCOPES" \
       --metadata "^ ^$ARG" \
       --image "xfstests"

case "$ARG" in
    cmd=maint*)
	sleep 1
	gcloud compute ssh $INSTANCE
	;;
esac
